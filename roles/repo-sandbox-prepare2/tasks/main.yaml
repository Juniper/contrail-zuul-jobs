---
- name: Include OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution_release }}.yaml"
    - "{{ ansible_os_family|lower }}.yaml"

- name: Create directory for the sandbox
  file:
    path: "{{ packaging.target_dir }}"
    state: directory

- name: Initialize android repo
  command: "repo init -m {{ manifest_file }} -u {{ ansible_env.HOME }}/{{ zuul._projects['review.opencontrail.org/Juniper/contrail-vnc'].src_dir }}"
  args:
    chdir: "{{ packaging.target_dir }}"

- name: Install generate_manifest.py dependencies
  package:
    name: python-lxml
    state: present

- name: Create CI & snapshot manifests
  generate_manifest:
    sandbox_root: "{{ ansible_env.HOME }}/{{ packaging.target_dir }}"
    projects: "{{ zuul._projects }}"
    manifest_path: "{{ ansible_env.HOME }}/{{ zuul._projects['review.opencontrail.org/Juniper/contrail-vnc'].src_dir }}/{{ manifest_file }}"
    snapshot_path: "{{ ansible_env.HOME }}/manifest.xml"

- name: Synchronize repositories to the sandbox
  command: "repo sync --quiet"
  args:
    chdir: "{{ packaging.target_dir }}"

# `origins` fact is set by the generate_manifest module
- name: Restore project origins
  command: git remote add origin {{ item.value }}
  changed_when: remote.rc == 0
  failed_when:
    - remote.rc > 0
    - 'not "fatal: remote origin already exists." in remote.stderr'
    - 'not "fatal: remote origin already exists." in remote.stdout'
  args:
    chdir: "{{ item.key }}"
  with_dict: "{{ origins }}"
  register: remote
  tags:
    - skip_ansible_lint  # ANSIBLE0006,ANSIBLE0016

- name: Fetch all remotes
  command: "git fetch --all"
  args:
    chdir: "{{ item.item.key }}"
  with_items:
    - "{{ remote.results }}"
  when: item|changed
  tags:
    - skip_ansible_lint  # ANSIBLE0006,ANSIBLE0016

