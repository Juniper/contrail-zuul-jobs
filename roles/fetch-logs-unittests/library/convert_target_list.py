#!/usr/bin/env python

from ansible.module_utils.basic import *
import json
from os import path


DOCUMENTATION = '''
---
module: convert_target_list

short_description: Converts raw UT list generated by Scons into UT submodules list

description:
  - "Module takes as input raw UT list as it comes from Scons describe-test options and converts is by adjusting paths.
     For each UT dictionary in input file to directory path is translated to reflect xmls and logs structure as it
     is stored on logserver."

options:
  description_file:
    description:
      - "Path to raw output from Scons describe-tests. (Default: search unittest_list.txt in home dir)"
    required: false
  target_file:
    description:
      - "Path to script output - converted UT list. (Default: create unittest_targets.json in home dir,
         if exist override it)"
    required: false
  strip_prefix:
    description:
      - "Prefix to be striped from paths in UT target file."
    required: false
'''

EXAMPLES = '''
# Get list of UT from description_file, convert them by striping user homedir
# from path and write only unique UTs into target_file
- name: generate target list
  convert_target_list:
    description_file: '/home/zuul/unittest_list.txt'
    target_file: '/home/zuul/unittest_targets.json'
    strip_prefix: '/home/zuul'

# Get list of UT from ~/unittest_list.txt and write unique UTs
# into ~/target_list.txt
- name: generate target list
  convert_target_list:
'''


def convert_ut_dicts(ut_list, prefix):
    '''
        Convert paths in each UT dict to reflect logserver directory structure
    '''
    for ut_dict in ut_list:
        strip_prefix_from_paths(ut_dict, prefix)
    return  True, uniquify_ut_list(ut_list)


def strip_prefix_from_paths(ut_dict, prefix):
    '''
        Strip prefix from paths in UT dictionary
    '''
    for key, val in ut_dict.items():
        if "path" in key:
            p = path.dirname(val)

            if prefix != '':
                p = path.relpath(p, prefix)

            if key == 'xml_path':
                node = 'xmls'
            else:
                node = 'logs'

            ut_dict[key] = node + '/' + p + '/' + path.basename(val)


def uniquify_ut_list(ut_list):
    '''
        Returns list of unique UT dictionaries from argument list
    '''
    ut_tuples = [tuple(d.iteritems()) for d in ut_list]
    unique_ut_tuples = set(ut_tuples)
    return [dict(t) for t in unique_ut_tuples]


def load_unittests(descr_file):
    '''
        Function loads list of UT dictionaries fom file
    '''
    with open(descr_file, 'r') as fh:
        ut_list = [json.loads(line.rstrip()) for line in fh]
    return ut_list


def dump_targets(target_list, target_file):
    '''
        Dump to file list of UT dictionaries
    '''
    separators = (',', ':')
    indent = 4
    with open(target_file, 'w') as fh:
        fh.write(json.dumps(target_list, indent=indent, separators=separators))


def run_module():
    args = {
        "description_file": {"required": False, "default": "unittest_list.txt", "type": "str"},
        "target_file": {"required": False, "default": "unittest_targets.txt", "type": "str"},
        "strip_prefix": {"required": False, "default": "", "type": "str"}
    }

    module = AnsibleModule(argument_spec=args)
    descr_dicts = load_unittests(module.params['description_file'])
    has_changed, descr_dicts = convert_ut_dicts(descr_dicts, module.params['strip_prefix'])
    dump_targets(descr_dicts, module.params['target_file'])

    module.exit_json(changed=has_changed, meta=descr_dicts)


def main():
    run_module()

if __name__ == "__main__":
    main()
